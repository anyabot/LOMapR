import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { app } from '@/firebaseConfigs'
import { getDatabase, ref, child, get } from "firebase/database";

const dbRef = ref(getDatabase(app));

type getStateType = () => RootState;

export interface EnemyData {
  index: string;
  level: number;
}

export interface Wave {
  title: string;
  enemylist: string;
}

export interface Stage {
  name: string;
  title: string;
  grid: number[];
  type: string;
  wave: Wave[];
}

export interface Zone {
  img: string;
  title: string;
  gridsize: [number, number];
  stages: Stage[];
}

export interface World {
  img: string;
  title: string;
  type: string;
  id: string;
  zones: Zone[];
}

export interface WorldState {
  value: {[key: string]: World};
  status: 'idle' | 'loading' | 'failed';
}

const initialState: WorldState = {
  value: {},
  status: 'idle',
};

export const fetchWorldAsync = createAsyncThunk<{[key: string]: World}, void, {state: RootState}>(
  'world/fetch',
  async function (_, thunkApi)  {
    if (Object.keys(thunkApi.getState().world.value).length > 0) {
      return thunkApi.getState().world.value
    }
    else {
      const response = await get(child(dbRef, "World/")).then((snapshot) => snapshot)
      if (response.exists()) {
        var temp = response.val();
        Object.keys(temp).forEach(key => temp[key].id = key)
        return temp
      } else {
        return {};
      }
    }
  }
);

export const worldSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchWorldAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchWorldAsync.fulfilled, (state, action) => {
        state.value = action.payload;
      })
      .addCase(fetchWorldAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const selectWorld = (state: RootState) => state.world.value;
export const selectWorldStatus = (state: RootState) => state.world.status;

export default worldSlice.reducer;