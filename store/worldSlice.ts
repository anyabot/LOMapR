import { createAsyncThunk, createSlice, isRejectedWithValue, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { World } from '@/interfaces/world';

export interface WorldState {
  value: {[key: string]: World};
  status: 'idle' | 'loading' | 'failed';
}

const initialState: WorldState = {
  value: {},
  status: 'idle',
};

export const fetchWorldAsync = createAsyncThunk<{[key: string]: World}, void, {state: RootState}>(
  'world/fetch',
  async function (_, thunkApi)  {
    if (thunkApi.getState().world.status == "failed") return {}
    else if (Object.keys(thunkApi.getState().world.value).length > 0) {
      return thunkApi.getState().world.value
    }
    else {
      try {
        const response = await fetch("/api/world").then(res => res.json())
        return response ? response : {}
      }
      catch {
        return thunkApi.rejectWithValue({})
      }
    }
  }
);

export const worldSlice = createSlice({
  name: 'world',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchWorldAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchWorldAsync.fulfilled, (state, action) => {
        state.value = action.payload;
      })
      .addCase(fetchWorldAsync.rejected, (state, action) => {
        state.value = {};
        state.status = 'failed';
      })
  },
});

export const selectWorld = (state: RootState) => state.world.value;
export const selectWorldStatus = (state: RootState) => state.world.status;

export default worldSlice.reducer;