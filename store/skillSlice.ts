import { createAsyncThunk, createSlice, isRejectedWithValue, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { Skill } from '@/interfaces/skill';

export interface SkillState {
  value: {[key: string]: Skill};
  status: 'idle' | 'loading' | 'failed';
}

const initialState: SkillState = {
  value: {},
  status: 'idle',
};

export const fetchSkillAsync = createAsyncThunk<{[key: string]: Skill}, void, {state: RootState}>(
  'skill/fetch',
  async function (_, thunkApi)  {
    if (thunkApi.getState().skill.status == "failed") return {}
    else if (Object.keys(thunkApi.getState().skill.value).length > 0) {
      return thunkApi.getState().skill.value
    }
    else {
      try {
        const response = await fetch("/api/skill").then(res => res.json())
        return response ? response : {}
      }
      catch {
        return thunkApi.rejectWithValue({})
      }
    }
  }
);

export const skillSlice = createSlice({
  name: 'world',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchSkillAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchSkillAsync.fulfilled, (state, action) => {
        state.value = action.payload;
      })
      .addCase(fetchSkillAsync.rejected, (state, action) => {
        state.value = {};
        state.status = 'failed';
      })
  },
});

export const selectSkill = (state: RootState) => state.skill.value;
export const selectSkillStatus = (state: RootState) => state.skill.status;

export default skillSlice.reducer;