import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';

export interface ImageState {
  imagelink: {[key: string]: string};
  status: 'idle' | 'loading' | 'failed';
}

const initialState: ImageState = {
  imagelink: {},
  status: 'idle',
};

export const fetchImageAsync = createAsyncThunk<{[key: string]: string}, void, {state: RootState}>(
  'image/fetch',
  async function (_, thunkApi)  {
    if (Object.keys(thunkApi.getState().image.imagelink).length > 0) {
      return thunkApi.getState().image.imagelink
    }
    try {
      const response = await fetch(`/api/images`).then(res => res.json())
      return response ? response : null
    }
    catch {
      return null
    }
  }
);


export const ImageSlice = createSlice({
  name: 'enemy',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchImageAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchImageAsync.fulfilled, (state, action) => {
        state.imagelink = action.payload
      })
      .addCase(fetchImageAsync.rejected, (state) => {
        state.status = 'failed';
      })
  },
});

export const selectImage = (state: RootState) => state.image.imagelink;
export const selectImageStatus = (state: RootState) => state.image.imagelink;


export default ImageSlice.reducer;